import tkinter as tk
from tkinter import ttk, filedialog, colorchooser, messagebox
import json
import os

try:
    from PIL import ImageTk, Image
except ImportError:
    ImageTk = None
    Image = None
    messagebox.showwarning("Advertencia", "Pillow no está instalado. Instálelo con 'pip install Pillow' para soporte de imágenes.")

# Default configuration
default_config = {
    "nombre_usuario": "Usuario",
    "tema_interfaz": "claro",
    "idioma": "es",
    "tamaño_fuente": 12,
    "color_barra_menu": "#FFFFFF",  # White
    "color_letra": "#000000",       # Black
    "foto_perfil": ""
}

# Theme definitions for easier maintenance
THEMES = {
    "claro": {"bg": "#FFFFFF", "fg": "#000000", "menu_bg": "#F0F0F0"},
    "oscuro": {"bg": "#2C2C2C", "fg": "#FFFFFF", "menu_bg": "#3C3C3C"},
    "gris plateado": {"bg": "#C0C0C0", "fg": "#000000", "menu_bg": "#D0D0D0"},
    "violeta": {"bg": "#800080", "fg": "#FFFFFF", "menu_bg": "#A000A0"}
}

# Load configuration from file
def cargar_config():
    """Load configuration from config.json or return default_config."""
    if os.path.exists("config.json"):
        try:
            with open("config.json", "r", encoding="utf-8") as file:
                return json.load(file)
        except (json.JSONDecodeError, IOError) as e:
            messagebox.showerror("Error", f"No se pudo cargar config.json: {e}")
            return default_config
    return default_config

# Save configuration to file
def guardar_config(config):
    """Save configuration to config.json."""
    try:
        with open("config.json", "w", encoding="utf-8") as file:
            json.dump(config, file, indent=4)
    except IOError as e:
        messagebox.showerror("Error", f"No se pudo guardar config.json: {e}")

# Apply theme and colors to the application
def aplicar_tema_y_colores(ventana, menubar, tema, color_barra, color_letra, tamaño_fuente):
    """Apply theme and color settings to the window and widgets."""
    theme = THEMES.get(tema, THEMES["claro"])  # Default to claro if tema is invalid
    bg_color = theme["bg"]
    fg_color = theme["fg"]
    menu_bg = theme["menu_bg"]

    # Configure window background
    ventana.configure(bg=bg_color)

    # Configure menu bar if provided
    if menubar:
        menubar.configure(bg=color_barra, fg=color_letra)

    # Configure ttk styles
    style = ttk.Style()
    style.configure("TFrame", background=bg_color)
    style.configure("TLabel", background=bg_color, foreground=fg_color, font=("Arial", tamaño_fuente))
    style.configure("TButton", background=menu_bg, foreground=fg_color, font=("Arial", tamaño_fuente))
    style.configure("TEntry", fieldbackground=bg_color, foreground=fg_color, font=("Arial", tamaño_fuente))
    style.configure("TCombobox", fieldbackground=bg_color, foreground=fg_color, font=("Arial", tamaño_fuente))

    return bg_color, fg_color

# Main application class
class Aplicacion:
    def __init__(self, root):
        self.root = root
        self.root.title("Aplicación de Escritorio")
        self.root.geometry("800x600")

        # Load configuration
        self.config = cargar_config()

        # Create menu bar
        self.menubar = tk.Menu(self.root, bg=self.config["color_barra_menu"], fg=self.config["color_letra"])
        self.root.config(menu=self.menubar)

        # Apply initial theme
        self.bg_color, self.fg_color = aplicar_tema_y_colores(
            self.root, self.menubar, self.config["tema_interfaz"],
            self.config["color_barra_menu"], self.config["color_letra"],
            self.config["tamaño_fuente"]
        )

        # Create menus and interface
        self.crear_menu()
        self.crear_interfaz_principal()
        self.actualizar_interfaz()

    def crear_menu(self):
        """Create the main menu bar with File, Edit, View, and Settings options."""
        # File menu
        archivo_menu = tk.Menu(self.menubar, tearoff=0, bg=self.config["color_barra_menu"], fg=self.config["color_letra"])
        self.menubar.add_cascade(label="Archivo", menu=archivo_menu)
        archivo_menu.add_command(label="Abrir", command=self.abrir_archivo)
        archivo_menu.add_command(label="Guardar", command=self.guardar_archivo)
        archivo_menu.add_separator()
        archivo_menu.add_command(label="Salir", command=self.root.quit)

        # Edit menu
        edicion_menu = tk.Menu(self.menubar, tearoff=0, bg=self.config["color_barra_menu"], fg=self.config["color_letra"])
        self.menubar.add_cascade(label="Edición", menu=edicion_menu)
        edicion_menu.add_command(label="Copiar", command=self.copiar)
        edicion_menu.add_command(label="Pegar", command=self.pegar)

        # View menu
        ver_menu = tk.Menu(self.menubar, tearoff=0, bg=self.config["color_barra_menu"], fg=self.config["color_letra"])
        self.menubar.add_cascade(label="Ver", menu=ver_menu)
        ver_menu.add_command(label="Zoom In", command=self.zoom_in)
        ver_menu.add_command(label="Zoom Out", command=self.zoom_out)

        # Settings menu
        self.menubar.add_command(label="Configuración", command=self.abrir_settings)

    def crear_interfaz_principal(self):
        """Create the main interface with welcome label, profile picture, and text area."""
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # Welcome label
        self.label_principal = ttk.Label(self.main_frame, text="Bienvenido, " + self.config["nombre_usuario"])
        self.label_principal.pack(pady=20)

        # Profile picture frame
        self.foto_frame = ttk.Frame(self.main_frame)
        self.foto_frame.pack(pady=10)
        self.label_foto = ttk.Label(self.foto_frame, text="Sin foto de perfil")
        self.label_foto.pack()

        # Text area with scrollbar
        self.text_area = tk.Text(self.main_frame, height=15, width=70,
                                 bg=self.bg_color, fg=self.fg_color,
                                 font=("Arial", self.config["tamaño_fuente"]))
        self.text_area.pack(pady=20, fill=tk.BOTH, expand=True)

        scrollbar = ttk.Scrollbar(self.text_area)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.text_area.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.text_area.yview)

        # Show profile picture if available
        if self.config["foto_perfil"] and os.path.exists(self.config["foto_perfil"]):
            self.mostrar_foto_perfil()

    def mostrar_foto_perfil(self):
        """Display the profile picture or a placeholder if unavailable."""
        if not ImageTk or not Image:
            self.label_foto.config(text="Pillow no instalado")
            return

        try:
            img = Image.open(self.config["foto_perfil"])
            img = img.resize((100, 100), Image.Resampling.LANCZOS)
            self.photo = ImageTk.PhotoImage(img)
            self.label_foto.config(image=self.photo, text="")
            self.label_foto.image = self.photo  # Keep reference
        except Exception as e:
            self.label_foto.config(image="", text="Error al cargar foto")
            messagebox.showerror("Error", f"No se pudo cargar la foto: {e}")

    def actualizar_interfaz(self):
        """Update the interface with current configuration."""
        self.bg_color, self.fg_color = aplicar_tema_y_colores(
            self.root, self.menubar, self.config["tema_interfaz"],
            self.config["color_barra_menu"], self.config["color_letra"],
            self.config["tamaño_fuente"]
        )

        # Update welcome label
        self.label_principal.config(text="Bienvenido, " + self.config["nombre_usuario"])

        # Update text area
        self.text_area.config(bg=self.bg_color, fg=self.fg_color,
                             font=("Arial", self.config["tamaño_fuente"]))

        # Update profile picture
        self.label_foto.config(image="", text="Sin foto de perfil")
        if self.config["foto_perfil"] and os.path.exists(self.config["foto_perfil"]):
            self.mostrar_foto_perfil()

    def abrir_archivo(self):
        """Open a text file and load its content into the text area."""
        file_path = filedialog.askopenfilename(
            title="Abrir archivo",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    content = file.read()
                    self.text_area.delete(1.0, tk.END)
                    self.text_area.insert(1.0, content)
            except Exception as e:
                messagebox.showerror("Error", f"No se pudo abrir el archivo: {e}")

    def guardar_archivo(self):
        """Save the text area content to a file."""
        file_path = filedialog.asksaveasfilename(
            title="Guardar archivo",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as file:
                    content = self.text_area.get(1.0, tk.END).rstrip()
                    file.write(content)
                messagebox.showinfo("Éxito", "Archivo guardado correctamente.")
            except Exception as e:
                messagebox.showerror("Error", f"No se pudo guardar el archivo: {e}")

    def copiar(self):
        """Copy selected text to clipboard."""
        try:
            text = self.text_area.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(text)
        except tk.TclError:
            pass  # No text selected

    def pegar(self):
        """Paste text from clipboard to text area."""
        try:
            text = self.root.clipboard_get()
            self.text_area.insert(tk.INSERT, text)
        except tk.TclError:
            pass  # Clipboard empty

    def zoom_in(self):
        """Increase font size up to a maximum of 24."""
        if self.config["tamaño_fuente"] < 24:
            self.config["tamaño_fuente"] += 1
            self.actualizar_interfaz()

    def zoom_out(self):
        """Decrease font size down to a minimum of 8."""
        if self.config["tamaño_fuente"] > 8:
            self.config["tamaño_fuente"] -= 1
            self.actualizar_interfaz()

    def abrir_settings(self):
        """Open the settings window for configuration."""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("Configuración")
        settings_window.geometry("500x600")
        settings_window.transient(self.root)
        settings_window.grab_set()

        # Apply theme to settings window
        aplicar_tema_y_colores(settings_window, None, self.config["tema_interfaz"],
                              self.config["color_barra_menu"], self.config["color_letra"],
                              self.config["tamaño_fuente"])

        main_frame = ttk.Frame(settings_window)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # Username
        ttk.Label(main_frame, text="Nombre de usuario:").grid(row=0, column=0, sticky=tk.W, pady=5)
        nombre_entry = ttk.Entry(main_frame)
        nombre_entry.insert(0, self.config["nombre_usuario"])
        nombre_entry.grid(row=0, column=1, sticky=tk.EW, pady=5, padx=(10, 0))

        # Interface theme
        ttk.Label(main_frame, text="Tema de interfaz:").grid(row=1, column=0, sticky=tk.W, pady=5)
        tema_combo = ttk.Combobox(main_frame, values=list(THEMES.keys()), state="readonly")
        tema_combo.set(self.config["tema_interfaz"])
        tema_combo.grid(row=1, column=1, sticky=tk.EW, pady=5, padx=(10, 0))

        # Language
        ttk.Label(main_frame, text="Idioma:").grid(row=2, column=0, sticky=tk.W, pady=5)
        idioma_combo = ttk.Combobox(main_frame, values=["es", "es-ES", "en", "en-US"], state="readonly")
        idioma_combo.set(self.config["idioma"])
        idioma_combo.grid(row=2, column=1, sticky=tk.EW, pady=5, padx=(10, 0))

        # Font size
        ttk.Label(main_frame, text="Tamaño de fuente:").grid(row=3, column=0, sticky=tk.W, pady=5)
        fuente_entry = ttk.Entry(main_frame)
        fuente_entry.insert(0, self.config["tamaño_fuente"])
        fuente_entry.grid(row=3, column=1, sticky=tk.EW, pady=5, padx=(10, 0))

        # Menu bar color
        ttk.Label(main_frame, text="Color de la barra de menú:").grid(row=4, column=0, sticky=tk.W, pady=5)
        color_barra_frame = ttk.Frame(main_frame)
        color_barra_frame.grid(row=4, column=1, sticky=tk.EW, pady=5, padx=(10, 0))
        color_barra_button = ttk.Button(color_barra_frame, text="Seleccionar color",
                                       command=lambda: self.seleccionar_color_barra(color_barra_canvas))
        color_barra_button.pack(side=tk.LEFT, padx=(0, 10))
        color_barra_canvas = tk.Canvas(color_barra_frame, width=30, height=20,
                                      bg=self.config["color_barra_menu"], highlightthickness=1)
        color_barra_canvas.pack(side=tk.LEFT)

        # Text color
        ttk.Label(main_frame, text="Color de letra:").grid(row=5, column=0, sticky=tk.W, pady=5)
        color_letra_frame = ttk.Frame(main_frame)
        color_letra_frame.grid(row=5, column=1, sticky=tk.EW, pady=5, padx=(10, 0))
        color_letra_button = ttk.Button(color_letra_frame, text="Seleccionar color",
                                       command=lambda: self.seleccionar_color_letra(color_letra_canvas))
        color_letra_button.pack(side=tk.LEFT, padx=(0, 10))
        color_letra_canvas = tk.Canvas(color_letra_frame, width=30, height=20,
                                      bg=self.config["color_letra"], highlightthickness=1)
        color_letra_canvas.pack(side=tk.LEFT)

        # Profile picture
        ttk.Label(main_frame, text="Foto de perfil:").grid(row=6, column=0, sticky=tk.W, pady=5)
        foto_frame = ttk.Frame(main_frame)
        foto_frame.grid(row=6, column=1, sticky=tk.EW, pady=5, padx=(10, 0))
        foto_button = ttk.Button(foto_frame, text="Seleccionar foto",
                                command=lambda: self.seleccionar_foto(foto_label))
        foto_button.pack(side=tk.LEFT, padx=(0, 10))
        foto_label = ttk.Label(foto_frame, text=os.path.basename(self.config["foto_perfil"])
                             if self.config["foto_perfil"] else "Ninguna seleccionada")
        foto_label.pack(side=tk.LEFT)

        # Reset to default button
        ttk.Label(main_frame, text="").grid(row=7, column=0, sticky=tk.W, pady=5)
        reset_button = ttk.Button(main_frame, text="Restablecer valores por defecto",
                                 command=lambda: self.reset_to_default(
                                     nombre_entry, tema_combo, idioma_combo, fuente_entry,
                                     color_barra_canvas, color_letra_canvas, foto_label))
        reset_button.grid(row=7, column=1, sticky=tk.EW, pady=5, padx=(10, 0))

        # Action buttons
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=8, column=0, columnspan=2, pady=20)
        ttk.Button(button_frame, text="Guardar",
                  command=lambda: self.guardar_settings(
                      settings_window, nombre_entry.get(), tema_combo.get(),
                      idioma_combo.get(), fuente_entry.get(),
                      color_barra_canvas.cget("bg"), color_letra_canvas.cget("bg"),
                      self.config["foto_perfil"])).pack(side=tk.LEFT, padx=10)
        ttk.Button(button_frame, text="Cancelar",
                  command=settings_window.destroy).pack(side=tk.LEFT, padx=10)

        main_frame.columnconfigure(1, weight=1)
        settings_window.wait_window(settings_window)

    def reset_to_default(self, nombre_entry, tema_combo, idioma_combo, fuente_entry,
                         color_barra_canvas, color_letra_canvas, foto_label):
        """Reset settings fields to default values."""
        nombre_entry.delete(0, tk.END)
        nombre_entry.insert(0, default_config["nombre_usuario"])
        tema_combo.set(default_config["tema_interfaz"])
        idioma_combo.set(default_config["idioma"])
        fuente_entry.delete(0, tk.END)
        fuente_entry.insert(0, default_config["tamaño_fuente"])
        color_barra_canvas.config(bg=default_config["color_barra_menu"])
        color_letra_canvas.config(bg=default_config["color_letra"])
        self.config["foto_perfil"] = default_config["foto_perfil"]
        foto_label.config(text="Ninguna seleccionada")

    def seleccionar_color_barra(self, canvas):
        """Select a color for the menu bar."""
        color = colorchooser.askcolor(title="Seleccionar color de barra de menú",
                                     initialcolor=canvas.cget("bg"))[1]
        if color:
            canvas.config(bg=color)

    def seleccionar_color_letra(self, canvas):
        """Select a color for text."""
        color = colorchooser.askcolor(title="Seleccionar color de letra",
                                     initialcolor=canvas.cget("bg"))[1]
        if color:
            canvas.config(bg=color)

    def seleccionar_foto(self, label):
        """Select a profile picture file."""
        archivo = filedialog.askopenfilename(
            title="Seleccionar foto de perfil",
            filetypes=[("Imágenes", "*.jpg *.jpeg *.png *.gif *.bmp")]
        )
        if archivo:
            self.config["foto_perfil"] = archivo
            label.config(text=os.path.basename(archivo))

    def guardar_settings(self, window, nombre, tema, idioma, fuente, color_barra, color_letra, foto):
        """Save settings and update the interface."""
        try:
            if not nombre.strip():
                raise ValueError("El nombre de usuario no puede estar vacío.")
            font_size = int(fuente)
            if not 8 <= font_size <= 24:
                raise ValueError("El tamaño de fuente debe estar entre 8 y 24.")

            self.config.update({
                "nombre_usuario": nombre.strip(),
                "tema_interfaz": tema,
                "idioma": idioma,
                "tamaño_fuente": font_size,
                "color_barra_menu": color_barra,
                "color_letra": color_letra,
                "foto_perfil": foto
            })

            guardar_config(self.config)
            self.actualizar_interfaz()
            window.destroy()
            messagebox.showinfo("Éxito", "Configuración guardada y aplicada.")
        except ValueError as e:
            messagebox.showerror("Error", str(e))

if __name__ == "__main__":
    root = tk.Tk()
    app = Aplicacion(root)
    root.mainloop()
